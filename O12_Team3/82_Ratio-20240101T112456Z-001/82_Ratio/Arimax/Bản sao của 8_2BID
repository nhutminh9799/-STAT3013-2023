{"cells":[{"cell_type":"code","execution_count":2,"metadata":{"id":"-gE-Ez1qtyIA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1704034002456,"user_tz":-420,"elapsed":343322,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}},"outputId":"e26a2ab3-b34b-421b-c960-d47f0df83e8d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["# 1. connect file drive\n","from google.colab import drive\n","drive.mount('/content/drive')\n","import os\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","# plt.style.use('dark_background')\n","\n","from statsmodels.tsa.stattools import adfuller  # kiểm tra chuỗi có tính dừng không -> có phụ thuộc vào thời gian chạy không?\n","from statsmodels.tsa.seasonal import seasonal_decompose   # phân tích -> thành phần chuỗi gốc, thành phần xu hướng, thành phần mùa vụ và thành phần nhiễu\n","\n","from statsmodels.tsa.arima.model import ARIMA\n","from pmdarima.arima import auto_arima\n","from sklearn.metrics import mean_squared_log_error, mean_squared_error, mean_absolute_error\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","import math"]},{"cell_type":"code","source":["!pip install pmdarima"],"metadata":{"id":"b-ww3eYFwxn1","executionInfo":{"status":"ok","timestamp":1704033659146,"user_tz":-420,"elapsed":21835,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"f4a2c294-e1c9-4e87-fcf2-efcb69384668"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting pmdarima\n","  Downloading pmdarima-2.0.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl (2.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m10.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.3.2)\n","Requirement already satisfied: Cython!=0.29.18,!=0.29.31,>=0.29 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (3.0.6)\n","Requirement already satisfied: numpy>=1.21.2 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.23.5)\n","Requirement already satisfied: pandas>=0.19 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.5.3)\n","Requirement already satisfied: scikit-learn>=0.22 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.2.2)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.11.4)\n","Requirement already satisfied: statsmodels>=0.13.2 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (0.14.1)\n","Requirement already satisfied: urllib3 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (2.0.7)\n","Requirement already satisfied: setuptools!=50.0.0,>=38.6.0 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (67.7.2)\n","Requirement already satisfied: packaging>=17.1 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (23.2)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.19->pmdarima) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.19->pmdarima) (2023.3.post1)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.22->pmdarima) (3.2.0)\n","Requirement already satisfied: patsy>=0.5.4 in /usr/local/lib/python3.10/dist-packages (from statsmodels>=0.13.2->pmdarima) (0.5.4)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from patsy>=0.5.4->statsmodels>=0.13.2->pmdarima) (1.16.0)\n","Installing collected packages: pmdarima\n","Successfully installed pmdarima-2.0.4\n"]}]},{"cell_type":"code","source":["# 2. Đọc file csv\n","# company_csv = '/content/drive/MyDrive/Colab Notebooks/Datacrawl/IMP.csv'\n","company_csv = '/content/drive/My Drive/data1/BID_Stock_Data.csv'\n","# company_csv = '/content/drive/MyDrive/Colab Notebooks/Datacrawl/VMD.csv'\n","data = pd.read_csv(company_csv)\n","data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"Ev9XrN91MIPc","executionInfo":{"status":"ok","timestamp":1704016284428,"user_tz":-420,"elapsed":318,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}},"outputId":"4bb5582c-a45e-477d-ddf7-8777b3ca24da"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            Date         Open         High          Low        Close  \\\n","0      1/27/2014  13193956055  13264512695  12770621094  12982289063   \n","1       2/6/2014  12841176758  12911732422  12417841797  12417841797   \n","2       2/7/2014  12276729492  12347285156  11641726563  11712282227   \n","3      2/10/2014  11641726563  12135618164  11430058594  11994505859   \n","4      2/11/2014  12135618164  12135618164  11923950195  11923950195   \n","...          ...          ...          ...          ...          ...   \n","2460   12/8/2023  40600000000  42000000000  40600000000  41900000000   \n","2461  12/11/2023  42000000000  42200000000  41350000000  41400000000   \n","2462  12/12/2023  41500000000  42050000000  41200000000  41900000000   \n","2463  12/13/2023  41900000000  42000000000  40600000000  41600000000   \n","2464  12/14/2023  41650000000  41800000000  41300000000  41600000000   \n","\n","        Adj Close   Volume  \n","0     12982289063  4593392  \n","1     12417841797  1360040  \n","2     11712282227  4234371  \n","3     11994505859  5771436  \n","4     11923950195  2747437  \n","...           ...      ...  \n","2460  41900000000  2406400  \n","2461  41400000000  1589400  \n","2462  41900000000   956200  \n","2463  41600000000   793400  \n","2464  41600000000   779800  \n","\n","[2465 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-a86f49eb-8dc5-49ea-a073-122847e798d2\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Adj Close</th>\n","      <th>Volume</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1/27/2014</td>\n","      <td>13193956055</td>\n","      <td>13264512695</td>\n","      <td>12770621094</td>\n","      <td>12982289063</td>\n","      <td>12982289063</td>\n","      <td>4593392</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2/6/2014</td>\n","      <td>12841176758</td>\n","      <td>12911732422</td>\n","      <td>12417841797</td>\n","      <td>12417841797</td>\n","      <td>12417841797</td>\n","      <td>1360040</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2/7/2014</td>\n","      <td>12276729492</td>\n","      <td>12347285156</td>\n","      <td>11641726563</td>\n","      <td>11712282227</td>\n","      <td>11712282227</td>\n","      <td>4234371</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2/10/2014</td>\n","      <td>11641726563</td>\n","      <td>12135618164</td>\n","      <td>11430058594</td>\n","      <td>11994505859</td>\n","      <td>11994505859</td>\n","      <td>5771436</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2/11/2014</td>\n","      <td>12135618164</td>\n","      <td>12135618164</td>\n","      <td>11923950195</td>\n","      <td>11923950195</td>\n","      <td>11923950195</td>\n","      <td>2747437</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2460</th>\n","      <td>12/8/2023</td>\n","      <td>40600000000</td>\n","      <td>42000000000</td>\n","      <td>40600000000</td>\n","      <td>41900000000</td>\n","      <td>41900000000</td>\n","      <td>2406400</td>\n","    </tr>\n","    <tr>\n","      <th>2461</th>\n","      <td>12/11/2023</td>\n","      <td>42000000000</td>\n","      <td>42200000000</td>\n","      <td>41350000000</td>\n","      <td>41400000000</td>\n","      <td>41400000000</td>\n","      <td>1589400</td>\n","    </tr>\n","    <tr>\n","      <th>2462</th>\n","      <td>12/12/2023</td>\n","      <td>41500000000</td>\n","      <td>42050000000</td>\n","      <td>41200000000</td>\n","      <td>41900000000</td>\n","      <td>41900000000</td>\n","      <td>956200</td>\n","    </tr>\n","    <tr>\n","      <th>2463</th>\n","      <td>12/13/2023</td>\n","      <td>41900000000</td>\n","      <td>42000000000</td>\n","      <td>40600000000</td>\n","      <td>41600000000</td>\n","      <td>41600000000</td>\n","      <td>793400</td>\n","    </tr>\n","    <tr>\n","      <th>2464</th>\n","      <td>12/14/2023</td>\n","      <td>41650000000</td>\n","      <td>41800000000</td>\n","      <td>41300000000</td>\n","      <td>41600000000</td>\n","      <td>41600000000</td>\n","      <td>779800</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2465 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a86f49eb-8dc5-49ea-a073-122847e798d2')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a86f49eb-8dc5-49ea-a073-122847e798d2 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a86f49eb-8dc5-49ea-a073-122847e798d2');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c4079ee3-628e-4138-8080-fc787fee4e08\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c4079ee3-628e-4138-8080-fc787fee4e08')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c4079ee3-628e-4138-8080-fc787fee4e08 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_e95bcb99-7410-4f6a-9421-f91fc28a051d\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_e95bcb99-7410-4f6a-9421-f91fc28a051d button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["# 2. # Drop missing values\n","df = pd.read_csv(company_csv)\n","df = df[['Close']]\n","df = df.dropna()\n","df = df.reset_index(drop=True) # Reset the index"],"metadata":{"id":"msiQO591Mmv3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 3. Split the data into training, testing.\n","train_size = int(0.8* len(df))\n","test_size = len(df)-train_size\n","\n","train_data = df[:train_size]\n","test_data = df[train_size:train_size+test_size]"],"metadata":{"id":"3Ax7kuNIMqBu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 4. Training ...\n","x_train = np.array(train_data.index).reshape(-1, 1)\n","y_train = np.array(train_data['Close'])"],"metadata":{"id":"QEjNd1-3NX7I"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["exog_train = np.arange(len(train_data))"],"metadata":{"id":"i-hB4KEpxvLh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model_autoARIMA = auto_arima(y_train,start_p=0, start_q=0,\n","                           max_p=5, max_q=5, m=12,\n","                           start_P=0, seasonal=False,\n","                           d=0, D=0, trace=True,\n","                           error_action='ignore',\n","                           suppress_warnings=True,\n","                           stepwise=True,\n","                      exogenous= data[['High','Open','Low']][:len(y_train)])\n","\n","model_autoARIMA.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":886},"id":"OghyonDMxydH","executionInfo":{"status":"ok","timestamp":1704016317664,"user_tz":-420,"elapsed":25607,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}},"outputId":"eaca943f-c01b-4d5c-9011-07fa3c97e106"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/pmdarima/arima/_validation.py:62: UserWarning: m (12) set for non-seasonal fit. Setting to 0\n","  warnings.warn(\"m (%i) set for non-seasonal fit. Setting to 0\" % m)\n"]},{"output_type":"stream","name":"stdout","text":["Performing stepwise search to minimize aic\n"," ARIMA(0,0,0)(0,0,0)[0]             : AIC=99432.290, Time=0.21 sec\n"," ARIMA(1,0,0)(0,0,0)[0]             : AIC=inf, Time=1.31 sec\n"," ARIMA(0,0,1)(0,0,0)[0]             : AIC=97976.844, Time=0.92 sec\n"," ARIMA(1,0,1)(0,0,0)[0]             : AIC=84608.170, Time=1.84 sec\n"," ARIMA(2,0,1)(0,0,0)[0]             : AIC=84609.280, Time=1.94 sec\n"," ARIMA(1,0,2)(0,0,0)[0]             : AIC=84608.469, Time=2.34 sec\n"," ARIMA(0,0,2)(0,0,0)[0]             : AIC=97630.334, Time=1.00 sec\n"," ARIMA(2,0,0)(0,0,0)[0]             : AIC=inf, Time=1.78 sec\n"," ARIMA(2,0,2)(0,0,0)[0]             : AIC=84609.931, Time=5.11 sec\n"," ARIMA(1,0,1)(0,0,0)[0] intercept   : AIC=84606.544, Time=1.99 sec\n"," ARIMA(0,0,1)(0,0,0)[0] intercept   : AIC=94057.416, Time=0.84 sec\n"," ARIMA(1,0,0)(0,0,0)[0] intercept   : AIC=inf, Time=0.28 sec\n"," ARIMA(2,0,1)(0,0,0)[0] intercept   : AIC=84607.970, Time=2.82 sec\n"," ARIMA(1,0,2)(0,0,0)[0] intercept   : AIC=84606.706, Time=0.94 sec\n"," ARIMA(0,0,0)(0,0,0)[0] intercept   : AIC=95484.022, Time=0.07 sec\n"," ARIMA(0,0,2)(0,0,0)[0] intercept   : AIC=93711.749, Time=0.54 sec\n"," ARIMA(2,0,0)(0,0,0)[0] intercept   : AIC=inf, Time=0.66 sec\n"," ARIMA(2,0,2)(0,0,0)[0] intercept   : AIC=84608.569, Time=0.87 sec\n","\n","Best model:  ARIMA(1,0,1)(0,0,0)[0] intercept\n","Total fit time: 25.517 seconds\n"]},{"output_type":"execute_result","data":{"text/plain":["<class 'statsmodels.iolib.summary.Summary'>\n","\"\"\"\n","                               SARIMAX Results                                \n","==============================================================================\n","Dep. Variable:                      y   No. Observations:                 1972\n","Model:               SARIMAX(1, 0, 1)   Log Likelihood              -42299.272\n","Date:                Sun, 31 Dec 2023   AIC                          84606.544\n","Time:                        09:51:57   BIC                          84628.891\n","Sample:                             0   HQIC                         84614.755\n","                               - 1972                                         \n","Covariance Type:                  opg                                         \n","==============================================================================\n","                 coef    std err          z      P>|z|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","intercept   4.664e+07   2.34e-14   1.99e+21      0.000    4.66e+07    4.66e+07\n","ar.L1          0.9978      0.000   2611.929      0.000       0.997       0.999\n","ma.L1          0.0165      0.014      1.192      0.233      -0.011       0.044\n","sigma2      2.496e+17   1.86e-21   1.35e+38      0.000     2.5e+17     2.5e+17\n","===================================================================================\n","Ljung-Box (L1) (Q):                   0.00   Jarque-Bera (JB):              1090.05\n","Prob(Q):                              0.97   Prob(JB):                         0.00\n","Heteroskedasticity (H):               4.66   Skew:                            -0.27\n","Prob(H) (two-sided):                  0.00   Kurtosis:                         6.60\n","===================================================================================\n","\n","Warnings:\n","[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n","[2] Covariance matrix is singular or near-singular, with condition number 5.28e+53. Standard errors may be unstable.\n","\"\"\""],"text/html":["<table class=\"simpletable\">\n","<caption>SARIMAX Results</caption>\n","<tr>\n","  <th>Dep. Variable:</th>           <td>y</td>        <th>  No. Observations:  </th>    <td>1972</td>   \n","</tr>\n","<tr>\n","  <th>Model:</th>           <td>SARIMAX(1, 0, 1)</td> <th>  Log Likelihood     </th> <td>-42299.272</td>\n","</tr>\n","<tr>\n","  <th>Date:</th>            <td>Sun, 31 Dec 2023</td> <th>  AIC                </th>  <td>84606.544</td>\n","</tr>\n","<tr>\n","  <th>Time:</th>                <td>09:51:57</td>     <th>  BIC                </th>  <td>84628.891</td>\n","</tr>\n","<tr>\n","  <th>Sample:</th>                  <td>0</td>        <th>  HQIC               </th>  <td>84614.755</td>\n","</tr>\n","<tr>\n","  <th></th>                      <td> - 1972</td>     <th>                     </th>      <td> </td>    \n","</tr>\n","<tr>\n","  <th>Covariance Type:</th>        <td>opg</td>       <th>                     </th>      <td> </td>    \n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","      <td></td>         <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n","</tr>\n","<tr>\n","  <th>intercept</th> <td> 4.664e+07</td> <td> 2.34e-14</td> <td> 1.99e+21</td> <td> 0.000</td> <td> 4.66e+07</td> <td> 4.66e+07</td>\n","</tr>\n","<tr>\n","  <th>ar.L1</th>     <td>    0.9978</td> <td>    0.000</td> <td> 2611.929</td> <td> 0.000</td> <td>    0.997</td> <td>    0.999</td>\n","</tr>\n","<tr>\n","  <th>ma.L1</th>     <td>    0.0165</td> <td>    0.014</td> <td>    1.192</td> <td> 0.233</td> <td>   -0.011</td> <td>    0.044</td>\n","</tr>\n","<tr>\n","  <th>sigma2</th>    <td> 2.496e+17</td> <td> 1.86e-21</td> <td> 1.35e+38</td> <td> 0.000</td> <td>  2.5e+17</td> <td>  2.5e+17</td>\n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","  <th>Ljung-Box (L1) (Q):</th>     <td>0.00</td> <th>  Jarque-Bera (JB):  </th> <td>1090.05</td>\n","</tr>\n","<tr>\n","  <th>Prob(Q):</th>                <td>0.97</td> <th>  Prob(JB):          </th>  <td>0.00</td>  \n","</tr>\n","<tr>\n","  <th>Heteroskedasticity (H):</th> <td>4.66</td> <th>  Skew:              </th>  <td>-0.27</td> \n","</tr>\n","<tr>\n","  <th>Prob(H) (two-sided):</th>    <td>0.00</td> <th>  Kurtosis:          </th>  <td>6.60</td>  \n","</tr>\n","</table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step).<br/>[2] Covariance matrix is singular or near-singular, with condition number 5.28e+53. Standard errors may be unstable."],"text/latex":"\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}          &        y         & \\textbf{  No. Observations:  } &    1972     \\\\\n\\textbf{Model:}                  & SARIMAX(1, 0, 1) & \\textbf{  Log Likelihood     } & -42299.272  \\\\\n\\textbf{Date:}                   & Sun, 31 Dec 2023 & \\textbf{  AIC                } & 84606.544   \\\\\n\\textbf{Time:}                   &     09:51:57     & \\textbf{  BIC                } & 84628.891   \\\\\n\\textbf{Sample:}                 &        0         & \\textbf{  HQIC               } & 84614.755   \\\\\n\\textbf{}                        &      - 1972      & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}        &       opg        & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                   & \\textbf{coef} & \\textbf{std err} & \\textbf{z} & \\textbf{P$> |$z$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{intercept} &    4.664e+07  &     2.34e-14     &  1.99e+21  &         0.000        &     4.66e+07    &     4.66e+07     \\\\\n\\textbf{ar.L1}     &       0.9978  &        0.000     &  2611.929  &         0.000        &        0.997    &        0.999     \\\\\n\\textbf{ma.L1}     &       0.0165  &        0.014     &     1.192  &         0.233        &       -0.011    &        0.044     \\\\\n\\textbf{sigma2}    &    2.496e+17  &     1.86e-21     &  1.35e+38  &         0.000        &      2.5e+17    &      2.5e+17     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Ljung-Box (L1) (Q):}     & 0.00 & \\textbf{  Jarque-Bera (JB):  } & 1090.05  \\\\\n\\textbf{Prob(Q):}                & 0.97 & \\textbf{  Prob(JB):          } &   0.00   \\\\\n\\textbf{Heteroskedasticity (H):} & 4.66 & \\textbf{  Skew:              } &  -0.27   \\\\\n\\textbf{Prob(H) (two-sided):}    & 0.00 & \\textbf{  Kurtosis:          } &   6.60   \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{SARIMAX Results}\n\\end{center}\n\nWarnings: \\newline\n [1] Covariance matrix calculated using the outer product of gradients (complex-step). \\newline\n [2] Covariance matrix is singular or near-singular, with condition number 5.28e+53. Standard errors may be unstable."},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["model = ARIMA(y_train, order=(2,0,1),exog=data[['High','Open','Low']][:len(y_train)]).fit()\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":554},"id":"iJ1FSbBGoN1x","executionInfo":{"status":"ok","timestamp":1704016319824,"user_tz":-420,"elapsed":2169,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}},"outputId":"fd715983-f765-4f04-d893-530e3066e112"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<class 'statsmodels.iolib.summary.Summary'>\n","\"\"\"\n","                               SARIMAX Results                                \n","==============================================================================\n","Dep. Variable:                      y   No. Observations:                 1972\n","Model:                 ARIMA(2, 0, 1)   Log Likelihood              -40544.725\n","Date:                Sun, 31 Dec 2023   AIC                          81105.450\n","Time:                        09:51:59   BIC                          81150.145\n","Sample:                             0   HQIC                         81121.873\n","                               - 1972                                         \n","Covariance Type:                  opg                                         \n","==============================================================================\n","                 coef    std err          z      P>|z|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","const       1.308e+07   4.97e-10   2.63e+16      0.000    1.31e+07    1.31e+07\n","High           0.8479      0.010     86.927      0.000       0.829       0.867\n","Open          -0.6386      0.011    -57.737      0.000      -0.660      -0.617\n","Low            0.7886      0.008     93.926      0.000       0.772       0.805\n","ar.L1          0.0877      0.304      0.288      0.773      -0.508       0.684\n","ar.L2          0.0687      0.034      2.038      0.042       0.003       0.135\n","ma.L1         -0.1889      0.305     -0.618      0.536      -0.788       0.410\n","sigma2      4.232e+16   1.71e-17   2.47e+33      0.000    4.23e+16    4.23e+16\n","===================================================================================\n","Ljung-Box (L1) (Q):                   0.00   Jarque-Bera (JB):              1565.71\n","Prob(Q):                              0.99   Prob(JB):                         0.00\n","Heteroskedasticity (H):               5.11   Skew:                            -0.20\n","Prob(H) (two-sided):                  0.00   Kurtosis:                         7.35\n","===================================================================================\n","\n","Warnings:\n","[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n","[2] Covariance matrix is singular or near-singular, with condition number 2.39e+48. Standard errors may be unstable.\n","\"\"\""],"text/html":["<table class=\"simpletable\">\n","<caption>SARIMAX Results</caption>\n","<tr>\n","  <th>Dep. Variable:</th>           <td>y</td>        <th>  No. Observations:  </th>    <td>1972</td>   \n","</tr>\n","<tr>\n","  <th>Model:</th>            <td>ARIMA(2, 0, 1)</td>  <th>  Log Likelihood     </th> <td>-40544.725</td>\n","</tr>\n","<tr>\n","  <th>Date:</th>            <td>Sun, 31 Dec 2023</td> <th>  AIC                </th>  <td>81105.450</td>\n","</tr>\n","<tr>\n","  <th>Time:</th>                <td>09:51:59</td>     <th>  BIC                </th>  <td>81150.145</td>\n","</tr>\n","<tr>\n","  <th>Sample:</th>                  <td>0</td>        <th>  HQIC               </th>  <td>81121.873</td>\n","</tr>\n","<tr>\n","  <th></th>                      <td> - 1972</td>     <th>                     </th>      <td> </td>    \n","</tr>\n","<tr>\n","  <th>Covariance Type:</th>        <td>opg</td>       <th>                     </th>      <td> </td>    \n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","     <td></td>       <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n","</tr>\n","<tr>\n","  <th>const</th>  <td> 1.308e+07</td> <td> 4.97e-10</td> <td> 2.63e+16</td> <td> 0.000</td> <td> 1.31e+07</td> <td> 1.31e+07</td>\n","</tr>\n","<tr>\n","  <th>High</th>   <td>    0.8479</td> <td>    0.010</td> <td>   86.927</td> <td> 0.000</td> <td>    0.829</td> <td>    0.867</td>\n","</tr>\n","<tr>\n","  <th>Open</th>   <td>   -0.6386</td> <td>    0.011</td> <td>  -57.737</td> <td> 0.000</td> <td>   -0.660</td> <td>   -0.617</td>\n","</tr>\n","<tr>\n","  <th>Low</th>    <td>    0.7886</td> <td>    0.008</td> <td>   93.926</td> <td> 0.000</td> <td>    0.772</td> <td>    0.805</td>\n","</tr>\n","<tr>\n","  <th>ar.L1</th>  <td>    0.0877</td> <td>    0.304</td> <td>    0.288</td> <td> 0.773</td> <td>   -0.508</td> <td>    0.684</td>\n","</tr>\n","<tr>\n","  <th>ar.L2</th>  <td>    0.0687</td> <td>    0.034</td> <td>    2.038</td> <td> 0.042</td> <td>    0.003</td> <td>    0.135</td>\n","</tr>\n","<tr>\n","  <th>ma.L1</th>  <td>   -0.1889</td> <td>    0.305</td> <td>   -0.618</td> <td> 0.536</td> <td>   -0.788</td> <td>    0.410</td>\n","</tr>\n","<tr>\n","  <th>sigma2</th> <td> 4.232e+16</td> <td> 1.71e-17</td> <td> 2.47e+33</td> <td> 0.000</td> <td> 4.23e+16</td> <td> 4.23e+16</td>\n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","  <th>Ljung-Box (L1) (Q):</th>     <td>0.00</td> <th>  Jarque-Bera (JB):  </th> <td>1565.71</td>\n","</tr>\n","<tr>\n","  <th>Prob(Q):</th>                <td>0.99</td> <th>  Prob(JB):          </th>  <td>0.00</td>  \n","</tr>\n","<tr>\n","  <th>Heteroskedasticity (H):</th> <td>5.11</td> <th>  Skew:              </th>  <td>-0.20</td> \n","</tr>\n","<tr>\n","  <th>Prob(H) (two-sided):</th>    <td>0.00</td> <th>  Kurtosis:          </th>  <td>7.35</td>  \n","</tr>\n","</table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step).<br/>[2] Covariance matrix is singular or near-singular, with condition number 2.39e+48. Standard errors may be unstable."],"text/latex":"\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}          &        y         & \\textbf{  No. Observations:  } &    1972     \\\\\n\\textbf{Model:}                  &  ARIMA(2, 0, 1)  & \\textbf{  Log Likelihood     } & -40544.725  \\\\\n\\textbf{Date:}                   & Sun, 31 Dec 2023 & \\textbf{  AIC                } & 81105.450   \\\\\n\\textbf{Time:}                   &     09:51:59     & \\textbf{  BIC                } & 81150.145   \\\\\n\\textbf{Sample:}                 &        0         & \\textbf{  HQIC               } & 81121.873   \\\\\n\\textbf{}                        &      - 1972      & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}        &       opg        & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                & \\textbf{coef} & \\textbf{std err} & \\textbf{z} & \\textbf{P$> |$z$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{const}  &    1.308e+07  &     4.97e-10     &  2.63e+16  &         0.000        &     1.31e+07    &     1.31e+07     \\\\\n\\textbf{High}   &       0.8479  &        0.010     &    86.927  &         0.000        &        0.829    &        0.867     \\\\\n\\textbf{Open}   &      -0.6386  &        0.011     &   -57.737  &         0.000        &       -0.660    &       -0.617     \\\\\n\\textbf{Low}    &       0.7886  &        0.008     &    93.926  &         0.000        &        0.772    &        0.805     \\\\\n\\textbf{ar.L1}  &       0.0877  &        0.304     &     0.288  &         0.773        &       -0.508    &        0.684     \\\\\n\\textbf{ar.L2}  &       0.0687  &        0.034     &     2.038  &         0.042        &        0.003    &        0.135     \\\\\n\\textbf{ma.L1}  &      -0.1889  &        0.305     &    -0.618  &         0.536        &       -0.788    &        0.410     \\\\\n\\textbf{sigma2} &    4.232e+16  &     1.71e-17     &  2.47e+33  &         0.000        &     4.23e+16    &     4.23e+16     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Ljung-Box (L1) (Q):}     & 0.00 & \\textbf{  Jarque-Bera (JB):  } & 1565.71  \\\\\n\\textbf{Prob(Q):}                & 0.99 & \\textbf{  Prob(JB):          } &   0.00   \\\\\n\\textbf{Heteroskedasticity (H):} & 5.11 & \\textbf{  Skew:              } &  -0.20   \\\\\n\\textbf{Prob(H) (two-sided):}    & 0.00 & \\textbf{  Kurtosis:          } &   7.35   \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{SARIMAX Results}\n\\end{center}\n\nWarnings: \\newline\n [1] Covariance matrix calculated using the outer product of gradients (complex-step). \\newline\n [2] Covariance matrix is singular or near-singular, with condition number 2.39e+48. Standard errors may be unstable."},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["x_test = np.array(test_data.index).reshape(-1, 1)\n","y_test = np.array(test_data['Close'])\n","y_pred = model.predict(start=int(x_test[0]), end=int(len(x_test)+x_test[0]-1),exog=data[['High','Open','Low']][int(x_test[0]):int(len(x_test)+x_test[0])])\n"],"metadata":{"id":"aJ4IYBwEs2QU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import mean_absolute_percentage_error,mean_absolute_error\n","from sklearn.metrics import mean_squared_log_error, mean_absolute_error, mean_absolute_percentage_error\n","# 7. Đánh giá độ chính xác test bằng RMSE, MAE , MAPE\n","# RMSE\n","test_rmse = np.sqrt(np.mean((y_pred - y_test)**2))\n","print('Testing RMSE:', test_rmse)\n","# MAPE\n","test_mape = mean_absolute_percentage_error(y_test,y_pred)\n","print('Testing MAPE:', test_mape)\n","# Calculate MSLE\n","test_msle = mean_squared_log_error(y_test, y_pred)\n","print('Testing MSLE:', test_msle)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E89hww-Bx4nh","executionInfo":{"status":"ok","timestamp":1704016319825,"user_tz":-420,"elapsed":37,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}},"outputId":"5e61696e-e406-415b-bbbd-32159e7ef7f2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Testing RMSE: 359060165.25690967\n","Testing MAPE: 0.007636251834073632\n","Testing MSLE: 0.00010206463159731642\n"]}]},{"cell_type":"code","source":["last_index =  df.index[-1]\n","last_data = pd.RangeIndex(start=last_index, stop=last_index+30, step=1)\n","\n","x_next_30_days = np.array(range(last_index+1, last_index+31)).reshape(-1, 1)\n","# Assuming 'data' is your training data, replace it with your actual training data\n","exog_data = data[['High', 'Open', 'Low']][last_index - 523:last_index]\n","\n","y_next_30_days = model.predict(start=int(x_next_30_days[0]), end=int(len(x_next_30_days) + x_next_30_days[0] - 1),\n","                               exog=data[['High','Open','Low']][last_index-523:last_index])\n","\n","print('Predicted closing prices for the next 30 days:')\n","print(y_next_30_days)\n","\n","\n","plt.plot(train_data.index, train_data['Close'])\n","plt.plot(test_data.index, test_data['Close'])\n","plt.plot(test_data.index, y_pred)\n","plt.plot(last_data,y_next_30_days)\n","plt.legend(['Train', 'Test', 'Predict_test','Next30Day'])\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"8wut2hWONd5E","executionInfo":{"status":"ok","timestamp":1704016334934,"user_tz":-420,"elapsed":900,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}},"outputId":"2d72e420-7202-46e6-81d6-bd493f8a19e8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Predicted closing prices for the next 30 days:\n","2465    3.661381e+10\n","2466    3.690171e+10\n","2467    3.727407e+10\n","2468    3.685527e+10\n","2469    3.784104e+10\n","2470    3.792363e+10\n","2471    3.772565e+10\n","2472    3.758354e+10\n","2473    3.832947e+10\n","2474    3.886927e+10\n","2475    3.875064e+10\n","2476    3.796155e+10\n","2477    3.859717e+10\n","2478    3.840882e+10\n","2479    3.858468e+10\n","2480    3.827644e+10\n","2481    3.815991e+10\n","2482    3.807147e+10\n","2483    3.830028e+10\n","2484    3.910665e+10\n","2485    3.919738e+10\n","2486    3.930066e+10\n","2487    3.956617e+10\n","2488    3.949881e+10\n","2489    4.001857e+10\n","2490    4.055345e+10\n","2491    4.171487e+10\n","2492    4.158184e+10\n","2493    4.165567e+10\n","2494    4.088470e+10\n","Name: predicted_mean, dtype: float64\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1703858030122}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}
{"cells":[{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gJr_9dXGpJ05","outputId":"5ce2d70d-6a03-4778-98fc-e6226177de2a","executionInfo":{"status":"ok","timestamp":1703957946413,"user_tz":-420,"elapsed":20502,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n"]},{"cell_type":"code","source":["import os\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","# plt.style.use('dark_background')\n","\n","from statsmodels.tsa.stattools import adfuller  # kiểm tra chuỗi có tính dừng không -> có phụ thuộc vào thời gian chạy không?\n","from statsmodels.tsa.seasonal import seasonal_decompose   # phân tích -> thành phần chuỗi gốc, thành phần xu hướng, thành phần mùa vụ và thành phần nhiễu\n","\n","from statsmodels.tsa.arima.model import ARIMA\n","from pmdarima.arima import auto_arima\n","from sklearn.metrics import mean_squared_log_error, mean_squared_error, mean_absolute_error\n","\n","\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","import math"],"metadata":{"id":"8cUC-5wOzLgh","executionInfo":{"status":"ok","timestamp":1703957855199,"user_tz":-420,"elapsed":1568,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-gE-Ez1qtyIA","outputId":"5b9ad00c-1632-4c0a-b525-9431e0da8d0b","executionInfo":{"status":"ok","timestamp":1703957853658,"user_tz":-420,"elapsed":29856,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting pmdarima\n","  Downloading pmdarima-2.0.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl (2.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m6.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.3.2)\n","Requirement already satisfied: Cython!=0.29.18,!=0.29.31,>=0.29 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (3.0.6)\n","Requirement already satisfied: numpy>=1.21.2 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.23.5)\n","Requirement already satisfied: pandas>=0.19 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.5.3)\n","Requirement already satisfied: scikit-learn>=0.22 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.2.2)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.11.4)\n","Requirement already satisfied: statsmodels>=0.13.2 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (0.14.1)\n","Requirement already satisfied: urllib3 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (2.0.7)\n","Requirement already satisfied: setuptools!=50.0.0,>=38.6.0 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (67.7.2)\n","Requirement already satisfied: packaging>=17.1 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (23.2)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.19->pmdarima) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.19->pmdarima) (2023.3.post1)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.22->pmdarima) (3.2.0)\n","Requirement already satisfied: patsy>=0.5.4 in /usr/local/lib/python3.10/dist-packages (from statsmodels>=0.13.2->pmdarima) (0.5.4)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from patsy>=0.5.4->statsmodels>=0.13.2->pmdarima) (1.16.0)\n","Installing collected packages: pmdarima\n","Successfully installed pmdarima-2.0.4\n"]}],"source":["!pip install pmdarima"]},{"cell_type":"code","source":["# 2. Đọc file csv\n","# company_csv = '/content/drive/MyDrive/Colab Notebooks/Datacrawl/IMP.csv'\n","company_csv = '/content/drive/My Drive/data1/BID_Stock_Data.csv'\n","# company_csv = '/content/drive/MyDrive/Colab Notebooks/Datacrawl/VMD.csv'\n","data = pd.read_csv(company_csv)\n","data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":444},"id":"Y0GCXtsLzlV9","executionInfo":{"status":"ok","timestamp":1703957950594,"user_tz":-420,"elapsed":625,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}},"outputId":"c8084287-9555-40cd-c36d-672cb60f827b"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            Date         Open         High          Low        Close  \\\n","0      1/27/2014  13193956055  13264512695  12770621094  12982289063   \n","1       2/6/2014  12841176758  12911732422  12417841797  12417841797   \n","2       2/7/2014  12276729492  12347285156  11641726563  11712282227   \n","3      2/10/2014  11641726563  12135618164  11430058594  11994505859   \n","4      2/11/2014  12135618164  12135618164  11923950195  11923950195   \n","...          ...          ...          ...          ...          ...   \n","2460   12/8/2023  40600000000  42000000000  40600000000  41900000000   \n","2461  12/11/2023  42000000000  42200000000  41350000000  41400000000   \n","2462  12/12/2023  41500000000  42050000000  41200000000  41900000000   \n","2463  12/13/2023  41900000000  42000000000  40600000000  41600000000   \n","2464  12/14/2023  41650000000  41800000000  41300000000  41600000000   \n","\n","        Adj Close   Volume  \n","0     12982289063  4593392  \n","1     12417841797  1360040  \n","2     11712282227  4234371  \n","3     11994505859  5771436  \n","4     11923950195  2747437  \n","...           ...      ...  \n","2460  41900000000  2406400  \n","2461  41400000000  1589400  \n","2462  41900000000   956200  \n","2463  41600000000   793400  \n","2464  41600000000   779800  \n","\n","[2465 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-3c9b1cf8-eaf2-4de6-b41e-6d4aedf12aef\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Adj Close</th>\n","      <th>Volume</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1/27/2014</td>\n","      <td>13193956055</td>\n","      <td>13264512695</td>\n","      <td>12770621094</td>\n","      <td>12982289063</td>\n","      <td>12982289063</td>\n","      <td>4593392</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2/6/2014</td>\n","      <td>12841176758</td>\n","      <td>12911732422</td>\n","      <td>12417841797</td>\n","      <td>12417841797</td>\n","      <td>12417841797</td>\n","      <td>1360040</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2/7/2014</td>\n","      <td>12276729492</td>\n","      <td>12347285156</td>\n","      <td>11641726563</td>\n","      <td>11712282227</td>\n","      <td>11712282227</td>\n","      <td>4234371</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2/10/2014</td>\n","      <td>11641726563</td>\n","      <td>12135618164</td>\n","      <td>11430058594</td>\n","      <td>11994505859</td>\n","      <td>11994505859</td>\n","      <td>5771436</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2/11/2014</td>\n","      <td>12135618164</td>\n","      <td>12135618164</td>\n","      <td>11923950195</td>\n","      <td>11923950195</td>\n","      <td>11923950195</td>\n","      <td>2747437</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2460</th>\n","      <td>12/8/2023</td>\n","      <td>40600000000</td>\n","      <td>42000000000</td>\n","      <td>40600000000</td>\n","      <td>41900000000</td>\n","      <td>41900000000</td>\n","      <td>2406400</td>\n","    </tr>\n","    <tr>\n","      <th>2461</th>\n","      <td>12/11/2023</td>\n","      <td>42000000000</td>\n","      <td>42200000000</td>\n","      <td>41350000000</td>\n","      <td>41400000000</td>\n","      <td>41400000000</td>\n","      <td>1589400</td>\n","    </tr>\n","    <tr>\n","      <th>2462</th>\n","      <td>12/12/2023</td>\n","      <td>41500000000</td>\n","      <td>42050000000</td>\n","      <td>41200000000</td>\n","      <td>41900000000</td>\n","      <td>41900000000</td>\n","      <td>956200</td>\n","    </tr>\n","    <tr>\n","      <th>2463</th>\n","      <td>12/13/2023</td>\n","      <td>41900000000</td>\n","      <td>42000000000</td>\n","      <td>40600000000</td>\n","      <td>41600000000</td>\n","      <td>41600000000</td>\n","      <td>793400</td>\n","    </tr>\n","    <tr>\n","      <th>2464</th>\n","      <td>12/14/2023</td>\n","      <td>41650000000</td>\n","      <td>41800000000</td>\n","      <td>41300000000</td>\n","      <td>41600000000</td>\n","      <td>41600000000</td>\n","      <td>779800</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2465 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c9b1cf8-eaf2-4de6-b41e-6d4aedf12aef')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3c9b1cf8-eaf2-4de6-b41e-6d4aedf12aef button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3c9b1cf8-eaf2-4de6-b41e-6d4aedf12aef');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e186ae3f-bb4c-4e32-b1fe-7fedb50eafe7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e186ae3f-bb4c-4e32-b1fe-7fedb50eafe7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e186ae3f-bb4c-4e32-b1fe-7fedb50eafe7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_84425317-bc20-4ab4-9682-eb733b4175f7\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_84425317-bc20-4ab4-9682-eb733b4175f7 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# 2. Đọc file dữ liệu và chia train test  theo tỉ lệ 7:3\n","df = pd.read_csv(company_csv)\n","df = df[['Close']]\n","df = df.dropna() # Drop missing values\n","df = df.reset_index(drop=True) # Reset the index\n","\n","# Split the data into training, testing.\n","train_size = int(0.7* len(df))\n","test_size = len(df)-train_size\n","\n","train_data = df[:train_size]\n","test_data = df[train_size:train_size+test_size]\n","val_data = df[train_size+test_size:]\n","x_train = np.array(train_data.index).reshape(-1, 1)\n","y_train = np.array(train_data['Close'])\n","exog_train = np.arange(len(train_data))"],"metadata":{"id":"I5jvpeGwvRNP","executionInfo":{"status":"ok","timestamp":1703958466792,"user_tz":-420,"elapsed":337,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["model_autoARIMA = auto_arima(y_train,start_p=0, start_q=0,\n","                           max_p=5, max_q=5, m=12,\n","                           start_P=0, seasonal=False,\n","                           d=0, D=0, trace=True,\n","                           error_action='ignore',\n","                           suppress_warnings=True,\n","                           stepwise=True,\n","                      exogenous= data[['High','Open','Low']][:len(y_train)])\n","\n","model_autoARIMA.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"MNa66odZwDuX","executionInfo":{"status":"ok","timestamp":1703958517983,"user_tz":-420,"elapsed":48444,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}},"outputId":"1243b994-47c7-4a07-abe3-f6b0ad04d3b8"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/pmdarima/arima/_validation.py:62: UserWarning: m (12) set for non-seasonal fit. Setting to 0\n","  warnings.warn(\"m (%i) set for non-seasonal fit. Setting to 0\" % m)\n"]},{"output_type":"stream","name":"stdout","text":["Performing stepwise search to minimize aic\n"," ARIMA(0,0,0)(0,0,0)[0]             : AIC=86711.861, Time=0.16 sec\n"," ARIMA(1,0,0)(0,0,0)[0]             : AIC=inf, Time=0.82 sec\n"," ARIMA(0,0,1)(0,0,0)[0]             : AIC=85441.120, Time=0.50 sec\n"," ARIMA(1,0,1)(0,0,0)[0]             : AIC=73882.245, Time=2.23 sec\n"," ARIMA(2,0,1)(0,0,0)[0]             : AIC=73882.017, Time=3.21 sec\n"," ARIMA(2,0,0)(0,0,0)[0]             : AIC=inf, Time=3.82 sec\n"," ARIMA(3,0,1)(0,0,0)[0]             : AIC=73882.620, Time=6.17 sec\n"," ARIMA(2,0,2)(0,0,0)[0]             : AIC=73882.666, Time=2.53 sec\n"," ARIMA(1,0,2)(0,0,0)[0]             : AIC=73881.267, Time=3.19 sec\n"," ARIMA(0,0,2)(0,0,0)[0]             : AIC=85139.092, Time=1.04 sec\n"," ARIMA(1,0,3)(0,0,0)[0]             : AIC=73883.184, Time=4.94 sec\n"," ARIMA(0,0,3)(0,0,0)[0]             : AIC=85059.981, Time=1.04 sec\n"," ARIMA(2,0,3)(0,0,0)[0]             : AIC=73883.822, Time=3.51 sec\n"," ARIMA(1,0,2)(0,0,0)[0] intercept   : AIC=73880.045, Time=1.87 sec\n"," ARIMA(0,0,2)(0,0,0)[0] intercept   : AIC=81704.726, Time=0.75 sec\n"," ARIMA(1,0,1)(0,0,0)[0] intercept   : AIC=73881.149, Time=1.10 sec\n"," ARIMA(2,0,2)(0,0,0)[0] intercept   : AIC=73882.086, Time=2.05 sec\n"," ARIMA(1,0,3)(0,0,0)[0] intercept   : AIC=73881.983, Time=3.32 sec\n"," ARIMA(0,0,1)(0,0,0)[0] intercept   : AIC=82008.425, Time=0.84 sec\n"," ARIMA(0,0,3)(0,0,0)[0] intercept   : AIC=81616.406, Time=0.87 sec\n"," ARIMA(2,0,1)(0,0,0)[0] intercept   : AIC=73881.250, Time=2.53 sec\n"," ARIMA(2,0,3)(0,0,0)[0] intercept   : AIC=73884.096, Time=1.53 sec\n","\n","Best model:  ARIMA(1,0,2)(0,0,0)[0] intercept\n","Total fit time: 48.070 seconds\n"]},{"output_type":"execute_result","data":{"text/plain":["<class 'statsmodels.iolib.summary.Summary'>\n","\"\"\"\n","                               SARIMAX Results                                \n","==============================================================================\n","Dep. Variable:                      y   No. Observations:                 1725\n","Model:               SARIMAX(1, 0, 2)   Log Likelihood              -36935.023\n","Date:                Sat, 30 Dec 2023   AIC                          73880.045\n","Time:                        17:48:37   BIC                          73907.310\n","Sample:                             0   HQIC                         73890.131\n","                               - 1725                                         \n","Covariance Type:                  opg                                         \n","==============================================================================\n","                 coef    std err          z      P>|z|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","intercept   3.685e+07   2.92e-13   1.26e+20      0.000    3.69e+07    3.69e+07\n","ar.L1          0.9982      0.000   2390.552      0.000       0.997       0.999\n","ma.L1          0.0075      0.014      0.529      0.597      -0.020       0.035\n","ma.L2          0.0412      0.015      2.703      0.007       0.011       0.071\n","sigma2      2.315e+17   4.81e-21   4.82e+37      0.000    2.32e+17    2.32e+17\n","===================================================================================\n","Ljung-Box (L1) (Q):                   0.00   Jarque-Bera (JB):              1036.00\n","Prob(Q):                              1.00   Prob(JB):                         0.00\n","Heteroskedasticity (H):               3.87   Skew:                            -0.15\n","Prob(H) (two-sided):                  0.00   Kurtosis:                         6.79\n","===================================================================================\n","\n","Warnings:\n","[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n","[2] Covariance matrix is singular or near-singular, with condition number 4.09e+52. Standard errors may be unstable.\n","\"\"\""],"text/html":["<table class=\"simpletable\">\n","<caption>SARIMAX Results</caption>\n","<tr>\n","  <th>Dep. Variable:</th>           <td>y</td>        <th>  No. Observations:  </th>    <td>1725</td>   \n","</tr>\n","<tr>\n","  <th>Model:</th>           <td>SARIMAX(1, 0, 2)</td> <th>  Log Likelihood     </th> <td>-36935.023</td>\n","</tr>\n","<tr>\n","  <th>Date:</th>            <td>Sat, 30 Dec 2023</td> <th>  AIC                </th>  <td>73880.045</td>\n","</tr>\n","<tr>\n","  <th>Time:</th>                <td>17:48:37</td>     <th>  BIC                </th>  <td>73907.310</td>\n","</tr>\n","<tr>\n","  <th>Sample:</th>                  <td>0</td>        <th>  HQIC               </th>  <td>73890.131</td>\n","</tr>\n","<tr>\n","  <th></th>                      <td> - 1725</td>     <th>                     </th>      <td> </td>    \n","</tr>\n","<tr>\n","  <th>Covariance Type:</th>        <td>opg</td>       <th>                     </th>      <td> </td>    \n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","      <td></td>         <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n","</tr>\n","<tr>\n","  <th>intercept</th> <td> 3.685e+07</td> <td> 2.92e-13</td> <td> 1.26e+20</td> <td> 0.000</td> <td> 3.69e+07</td> <td> 3.69e+07</td>\n","</tr>\n","<tr>\n","  <th>ar.L1</th>     <td>    0.9982</td> <td>    0.000</td> <td> 2390.552</td> <td> 0.000</td> <td>    0.997</td> <td>    0.999</td>\n","</tr>\n","<tr>\n","  <th>ma.L1</th>     <td>    0.0075</td> <td>    0.014</td> <td>    0.529</td> <td> 0.597</td> <td>   -0.020</td> <td>    0.035</td>\n","</tr>\n","<tr>\n","  <th>ma.L2</th>     <td>    0.0412</td> <td>    0.015</td> <td>    2.703</td> <td> 0.007</td> <td>    0.011</td> <td>    0.071</td>\n","</tr>\n","<tr>\n","  <th>sigma2</th>    <td> 2.315e+17</td> <td> 4.81e-21</td> <td> 4.82e+37</td> <td> 0.000</td> <td> 2.32e+17</td> <td> 2.32e+17</td>\n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","  <th>Ljung-Box (L1) (Q):</th>     <td>0.00</td> <th>  Jarque-Bera (JB):  </th> <td>1036.00</td>\n","</tr>\n","<tr>\n","  <th>Prob(Q):</th>                <td>1.00</td> <th>  Prob(JB):          </th>  <td>0.00</td>  \n","</tr>\n","<tr>\n","  <th>Heteroskedasticity (H):</th> <td>3.87</td> <th>  Skew:              </th>  <td>-0.15</td> \n","</tr>\n","<tr>\n","  <th>Prob(H) (two-sided):</th>    <td>0.00</td> <th>  Kurtosis:          </th>  <td>6.79</td>  \n","</tr>\n","</table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step).<br/>[2] Covariance matrix is singular or near-singular, with condition number 4.09e+52. Standard errors may be unstable."],"text/latex":"\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}          &        y         & \\textbf{  No. Observations:  } &    1725     \\\\\n\\textbf{Model:}                  & SARIMAX(1, 0, 2) & \\textbf{  Log Likelihood     } & -36935.023  \\\\\n\\textbf{Date:}                   & Sat, 30 Dec 2023 & \\textbf{  AIC                } & 73880.045   \\\\\n\\textbf{Time:}                   &     17:48:37     & \\textbf{  BIC                } & 73907.310   \\\\\n\\textbf{Sample:}                 &        0         & \\textbf{  HQIC               } & 73890.131   \\\\\n\\textbf{}                        &      - 1725      & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}        &       opg        & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                   & \\textbf{coef} & \\textbf{std err} & \\textbf{z} & \\textbf{P$> |$z$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{intercept} &    3.685e+07  &     2.92e-13     &  1.26e+20  &         0.000        &     3.69e+07    &     3.69e+07     \\\\\n\\textbf{ar.L1}     &       0.9982  &        0.000     &  2390.552  &         0.000        &        0.997    &        0.999     \\\\\n\\textbf{ma.L1}     &       0.0075  &        0.014     &     0.529  &         0.597        &       -0.020    &        0.035     \\\\\n\\textbf{ma.L2}     &       0.0412  &        0.015     &     2.703  &         0.007        &        0.011    &        0.071     \\\\\n\\textbf{sigma2}    &    2.315e+17  &     4.81e-21     &  4.82e+37  &         0.000        &     2.32e+17    &     2.32e+17     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Ljung-Box (L1) (Q):}     & 0.00 & \\textbf{  Jarque-Bera (JB):  } & 1036.00  \\\\\n\\textbf{Prob(Q):}                & 1.00 & \\textbf{  Prob(JB):          } &   0.00   \\\\\n\\textbf{Heteroskedasticity (H):} & 3.87 & \\textbf{  Skew:              } &  -0.15   \\\\\n\\textbf{Prob(H) (two-sided):}    & 0.00 & \\textbf{  Kurtosis:          } &   6.79   \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{SARIMAX Results}\n\\end{center}\n\nWarnings: \\newline\n [1] Covariance matrix calculated using the outer product of gradients (complex-step). \\newline\n [2] Covariance matrix is singular or near-singular, with condition number 4.09e+52. Standard errors may be unstable."},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["model = ARIMA(y_train, order=(2,0,1),exog=data[['High','Open','Low']][:len(y_train)]).fit()\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":572},"id":"NRYew3KHwMWD","executionInfo":{"status":"ok","timestamp":1703958523997,"user_tz":-420,"elapsed":6046,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}},"outputId":"602b28d9-335c-44ee-8cec-a6477cc0df4c"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<class 'statsmodels.iolib.summary.Summary'>\n","\"\"\"\n","                               SARIMAX Results                                \n","==============================================================================\n","Dep. Variable:                      y   No. Observations:                 1725\n","Model:                 ARIMA(2, 0, 1)   Log Likelihood              -35375.734\n","Date:                Sat, 30 Dec 2023   AIC                          70767.468\n","Time:                        17:48:43   BIC                          70811.092\n","Sample:                             0   HQIC                         70783.605\n","                               - 1725                                         \n","Covariance Type:                  opg                                         \n","==============================================================================\n","                 coef    std err          z      P>|z|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","const       2.604e+07    1.3e-10      2e+17      0.000     2.6e+07     2.6e+07\n","High           0.8489      0.010     81.869      0.000       0.829       0.869\n","Open          -0.6461      0.011    -56.881      0.000      -0.668      -0.624\n","Low            0.7943      0.010     81.349      0.000       0.775       0.813\n","ar.L1          0.3098      0.259      1.197      0.231      -0.198       0.817\n","ar.L2          0.0945      0.027      3.506      0.000       0.042       0.147\n","ma.L1         -0.4128      0.260     -1.589      0.112      -0.922       0.096\n","sigma2      3.815e+16   1.55e-17   2.47e+33      0.000    3.82e+16    3.82e+16\n","===================================================================================\n","Ljung-Box (L1) (Q):                   0.00   Jarque-Bera (JB):              1368.08\n","Prob(Q):                              0.99   Prob(JB):                         0.00\n","Heteroskedasticity (H):               4.39   Skew:                            -0.15\n","Prob(H) (two-sided):                  0.00   Kurtosis:                         7.35\n","===================================================================================\n","\n","Warnings:\n","[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n","[2] Covariance matrix is singular or near-singular, with condition number 1.04e+50. Standard errors may be unstable.\n","\"\"\""],"text/html":["<table class=\"simpletable\">\n","<caption>SARIMAX Results</caption>\n","<tr>\n","  <th>Dep. Variable:</th>           <td>y</td>        <th>  No. Observations:  </th>    <td>1725</td>   \n","</tr>\n","<tr>\n","  <th>Model:</th>            <td>ARIMA(2, 0, 1)</td>  <th>  Log Likelihood     </th> <td>-35375.734</td>\n","</tr>\n","<tr>\n","  <th>Date:</th>            <td>Sat, 30 Dec 2023</td> <th>  AIC                </th>  <td>70767.468</td>\n","</tr>\n","<tr>\n","  <th>Time:</th>                <td>17:48:43</td>     <th>  BIC                </th>  <td>70811.092</td>\n","</tr>\n","<tr>\n","  <th>Sample:</th>                  <td>0</td>        <th>  HQIC               </th>  <td>70783.605</td>\n","</tr>\n","<tr>\n","  <th></th>                      <td> - 1725</td>     <th>                     </th>      <td> </td>    \n","</tr>\n","<tr>\n","  <th>Covariance Type:</th>        <td>opg</td>       <th>                     </th>      <td> </td>    \n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","     <td></td>       <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n","</tr>\n","<tr>\n","  <th>const</th>  <td> 2.604e+07</td> <td>  1.3e-10</td> <td>    2e+17</td> <td> 0.000</td> <td>  2.6e+07</td> <td>  2.6e+07</td>\n","</tr>\n","<tr>\n","  <th>High</th>   <td>    0.8489</td> <td>    0.010</td> <td>   81.869</td> <td> 0.000</td> <td>    0.829</td> <td>    0.869</td>\n","</tr>\n","<tr>\n","  <th>Open</th>   <td>   -0.6461</td> <td>    0.011</td> <td>  -56.881</td> <td> 0.000</td> <td>   -0.668</td> <td>   -0.624</td>\n","</tr>\n","<tr>\n","  <th>Low</th>    <td>    0.7943</td> <td>    0.010</td> <td>   81.349</td> <td> 0.000</td> <td>    0.775</td> <td>    0.813</td>\n","</tr>\n","<tr>\n","  <th>ar.L1</th>  <td>    0.3098</td> <td>    0.259</td> <td>    1.197</td> <td> 0.231</td> <td>   -0.198</td> <td>    0.817</td>\n","</tr>\n","<tr>\n","  <th>ar.L2</th>  <td>    0.0945</td> <td>    0.027</td> <td>    3.506</td> <td> 0.000</td> <td>    0.042</td> <td>    0.147</td>\n","</tr>\n","<tr>\n","  <th>ma.L1</th>  <td>   -0.4128</td> <td>    0.260</td> <td>   -1.589</td> <td> 0.112</td> <td>   -0.922</td> <td>    0.096</td>\n","</tr>\n","<tr>\n","  <th>sigma2</th> <td> 3.815e+16</td> <td> 1.55e-17</td> <td> 2.47e+33</td> <td> 0.000</td> <td> 3.82e+16</td> <td> 3.82e+16</td>\n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","  <th>Ljung-Box (L1) (Q):</th>     <td>0.00</td> <th>  Jarque-Bera (JB):  </th> <td>1368.08</td>\n","</tr>\n","<tr>\n","  <th>Prob(Q):</th>                <td>0.99</td> <th>  Prob(JB):          </th>  <td>0.00</td>  \n","</tr>\n","<tr>\n","  <th>Heteroskedasticity (H):</th> <td>4.39</td> <th>  Skew:              </th>  <td>-0.15</td> \n","</tr>\n","<tr>\n","  <th>Prob(H) (two-sided):</th>    <td>0.00</td> <th>  Kurtosis:          </th>  <td>7.35</td>  \n","</tr>\n","</table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step).<br/>[2] Covariance matrix is singular or near-singular, with condition number 1.04e+50. Standard errors may be unstable."],"text/latex":"\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}          &        y         & \\textbf{  No. Observations:  } &    1725     \\\\\n\\textbf{Model:}                  &  ARIMA(2, 0, 1)  & \\textbf{  Log Likelihood     } & -35375.734  \\\\\n\\textbf{Date:}                   & Sat, 30 Dec 2023 & \\textbf{  AIC                } & 70767.468   \\\\\n\\textbf{Time:}                   &     17:48:43     & \\textbf{  BIC                } & 70811.092   \\\\\n\\textbf{Sample:}                 &        0         & \\textbf{  HQIC               } & 70783.605   \\\\\n\\textbf{}                        &      - 1725      & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}        &       opg        & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                & \\textbf{coef} & \\textbf{std err} & \\textbf{z} & \\textbf{P$> |$z$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{const}  &    2.604e+07  &      1.3e-10     &     2e+17  &         0.000        &      2.6e+07    &      2.6e+07     \\\\\n\\textbf{High}   &       0.8489  &        0.010     &    81.869  &         0.000        &        0.829    &        0.869     \\\\\n\\textbf{Open}   &      -0.6461  &        0.011     &   -56.881  &         0.000        &       -0.668    &       -0.624     \\\\\n\\textbf{Low}    &       0.7943  &        0.010     &    81.349  &         0.000        &        0.775    &        0.813     \\\\\n\\textbf{ar.L1}  &       0.3098  &        0.259     &     1.197  &         0.231        &       -0.198    &        0.817     \\\\\n\\textbf{ar.L2}  &       0.0945  &        0.027     &     3.506  &         0.000        &        0.042    &        0.147     \\\\\n\\textbf{ma.L1}  &      -0.4128  &        0.260     &    -1.589  &         0.112        &       -0.922    &        0.096     \\\\\n\\textbf{sigma2} &    3.815e+16  &     1.55e-17     &  2.47e+33  &         0.000        &     3.82e+16    &     3.82e+16     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Ljung-Box (L1) (Q):}     & 0.00 & \\textbf{  Jarque-Bera (JB):  } & 1368.08  \\\\\n\\textbf{Prob(Q):}                & 0.99 & \\textbf{  Prob(JB):          } &   0.00   \\\\\n\\textbf{Heteroskedasticity (H):} & 4.39 & \\textbf{  Skew:              } &  -0.15   \\\\\n\\textbf{Prob(H) (two-sided):}    & 0.00 & \\textbf{  Kurtosis:          } &   7.35   \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{SARIMAX Results}\n\\end{center}\n\nWarnings: \\newline\n [1] Covariance matrix calculated using the outer product of gradients (complex-step). \\newline\n [2] Covariance matrix is singular or near-singular, with condition number 1.04e+50. Standard errors may be unstable."},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["x_test = np.array(test_data.index).reshape(-1, 1)\n","y_test = np.array(test_data['Close'])\n","y_pred = model.predict(start=int(x_test[0]), end=int(len(x_test)+x_test[0]-1),exog=data[['High','Open','Low']][int(x_test[0]):int(len(x_test)+x_test[0])])\n","\n","from sklearn.metrics import mean_absolute_percentage_error,mean_absolute_error\n","from sklearn.metrics import mean_squared_log_error, mean_absolute_error, mean_absolute_percentage_error\n","# 7. Đánh giá độ chính xác test bằng RMSE, MAE , MAPE\n","# RMSE\n","test_rmse = np.sqrt(np.mean((y_pred - y_test)**2))\n","print('Testing RMSE:', test_rmse)\n","# MAPE\n","test_mape = mean_absolute_percentage_error(y_test,y_pred)\n","print('Testing MAPE:', test_mape)\n","# Calculate MSLE\n","test_msle = mean_squared_log_error(y_test, y_pred)\n","print('Testing MSLE:', test_msle)\n"],"metadata":{"id":"ayBAV3V1wS4k","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1703958529327,"user_tz":-420,"elapsed":380,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}},"outputId":"80fa89aa-48d1-49aa-9051-db12576faac9"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Testing RMSE: 331864008.2983175\n","Testing MAPE: 0.00719466777812412\n","Testing MSLE: 9.393917964304974e-05\n"]}]},{"cell_type":"code","source":["last_index =  df.index[-1]\n","last_data = pd.RangeIndex(start=last_index, stop=last_index+30, step=1)\n","\n","x_next_30_days = np.array(range(last_index+1, last_index+31)).reshape(-1, 1)\n","# Assuming 'data' is your training data, replace it with your actual training data\n","exog_data = data[['High', 'Open', 'Low']][last_index - 523:last_index]\n","\n","y_next_30_days = model.predict(start=int(x_next_30_days[0]), end=int(len(x_next_30_days) + x_next_30_days[0] - 1),\n","                               exog=data[['High','Open','Low']][last_index-770:last_index])\n","\n","print('Predicted closing prices for the next 30 days:')\n","print(y_next_30_days)\n","\n","\n","plt.plot(train_data.index, train_data['Close'])\n","plt.plot(test_data.index, test_data['Close'])\n","plt.plot(test_data.index, y_pred)\n","plt.plot(last_data,y_next_30_days)\n","plt.legend(['Train', 'Test', 'Predict_test','Next30Day'])\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"kJY-QlvfymFl","executionInfo":{"status":"ok","timestamp":1703958557671,"user_tz":-420,"elapsed":1161,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}},"outputId":"bbf72964-4660-407d-b9e9-e91cafe7b04f"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Predicted closing prices for the next 30 days:\n","2465    3.659565e+10\n","2466    3.687927e+10\n","2467    3.725613e+10\n","2468    3.683430e+10\n","2469    3.782352e+10\n","2470    3.790256e+10\n","2471    3.770583e+10\n","2472    3.756412e+10\n","2473    3.831188e+10\n","2474    3.884942e+10\n","2475    3.872658e+10\n","2476    3.793423e+10\n","2477    3.858032e+10\n","2478    3.838577e+10\n","2479    3.856204e+10\n","2480    3.825142e+10\n","2481    3.813823e+10\n","2482    3.804748e+10\n","2483    3.827580e+10\n","2484    3.908649e+10\n","2485    3.917683e+10\n","2486    3.928116e+10\n","2487    3.954530e+10\n","2488    3.947606e+10\n","2489    3.999742e+10\n","2490    4.053104e+10\n","2491    4.169498e+10\n","2492    4.155589e+10\n","2493    4.163249e+10\n","2494    4.085499e+10\n","Name: predicted_mean, dtype: float64\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1703856192848}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}
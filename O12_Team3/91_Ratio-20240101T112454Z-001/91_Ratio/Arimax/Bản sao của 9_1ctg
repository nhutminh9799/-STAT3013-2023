{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOA3U6rHQkYbO/u4Y8l8wom"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IOHMVn1f6IXG","executionInfo":{"status":"ok","timestamp":1703959733420,"user_tz":-420,"elapsed":8449,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}},"outputId":"e0fd8b6c-6448-467d-d604-e7e612ed6de0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting pmdarima\n","  Downloading pmdarima-2.0.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl (2.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m9.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.3.2)\n","Requirement already satisfied: Cython!=0.29.18,!=0.29.31,>=0.29 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (3.0.6)\n","Requirement already satisfied: numpy>=1.21.2 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.23.5)\n","Requirement already satisfied: pandas>=0.19 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.5.3)\n","Requirement already satisfied: scikit-learn>=0.22 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.2.2)\n","Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (1.11.4)\n","Requirement already satisfied: statsmodels>=0.13.2 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (0.14.1)\n","Requirement already satisfied: urllib3 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (2.0.7)\n","Requirement already satisfied: setuptools!=50.0.0,>=38.6.0 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (67.7.2)\n","Requirement already satisfied: packaging>=17.1 in /usr/local/lib/python3.10/dist-packages (from pmdarima) (23.2)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.19->pmdarima) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.19->pmdarima) (2023.3.post1)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.22->pmdarima) (3.2.0)\n","Requirement already satisfied: patsy>=0.5.4 in /usr/local/lib/python3.10/dist-packages (from statsmodels>=0.13.2->pmdarima) (0.5.4)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from patsy>=0.5.4->statsmodels>=0.13.2->pmdarima) (1.16.0)\n","Installing collected packages: pmdarima\n","Successfully installed pmdarima-2.0.4\n"]}],"source":["!pip install pmdarima"]},{"cell_type":"code","source":["# 1. connect file drive\n","from google.colab import drive\n","drive.mount('/content/drive')\n","import os\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","# plt.style.use('dark_background')\n","\n","from statsmodels.tsa.stattools import adfuller  # kiểm tra chuỗi có tính dừng không -> có phụ thuộc vào thời gian chạy không?\n","from statsmodels.tsa.seasonal import seasonal_decompose   # phân tích -> thành phần chuỗi gốc, thành phần xu hướng, thành phần mùa vụ và thành phần nhiễu\n","\n","from statsmodels.tsa.arima.model import ARIMA\n","from pmdarima.arima import auto_arima\n","from sklearn.metrics import mean_squared_log_error, mean_squared_error, mean_absolute_error\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","import math"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7W6zi6F16MpA","executionInfo":{"status":"ok","timestamp":1703959737257,"user_tz":-420,"elapsed":3853,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}},"outputId":"70f0f3b5-0b49-48da-ee8a-f40e02cfd36d"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["# 2. Đọc file csv\n","# company_csv = '/content/drive/MyDrive/Colab Notebooks/Datacrawl/IMP.csv'\n","company_csv = '/content/drive/My Drive/data1/CTG_Stock_Data.csv'\n","# company_csv = '/content/drive/MyDrive/Colab Notebooks/Datacrawl/VMD.csv'\n","data = pd.read_csv(company_csv)\n","data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":444},"id":"cd6qE9fV6PR3","executionInfo":{"status":"ok","timestamp":1703959697671,"user_tz":-420,"elapsed":1006,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}},"outputId":"5bf3c834-8a78-4b4d-ead2-14d05514432c"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            Date         Open         High          Low        Close  \\\n","0      1/27/2014  11717867188  11856540039  11648531250  11717867188   \n","1       2/6/2014  11648531250  11717867188  11509858398  11648531250   \n","2       2/7/2014  11579194336  11717867188  11509858398  11579194336   \n","3      2/10/2014  11509858398  11648531250  11440521484  11509858398   \n","4      2/11/2014  11579194336  11717867188  11440521484  11509858398   \n","...          ...          ...          ...          ...          ...   \n","2460   12/8/2023  27000000000  27100000000  26700000000  26900000000   \n","2461  12/11/2023  26950000000  27050000000  26700000000  26850000000   \n","2462  12/12/2023  26900000000  27000000000  26700000000  27000000000   \n","2463  12/13/2023  27150000000  27350000000  26700000000  26750000000   \n","2464  12/14/2023  26950000000  26950000000  26450000000  26750000000   \n","\n","        Adj Close   Volume  \n","0     11717867188   608510  \n","1     11648531250  1140509  \n","2     11579194336   826750  \n","3     11509858398  1639712  \n","4     11509858398  2082063  \n","...           ...      ...  \n","2460  26900000000  4518900  \n","2461  26850000000  2323100  \n","2462  27000000000  3346200  \n","2463  26750000000  3749800  \n","2464  26750000000  3873600  \n","\n","[2465 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-417e5419-721b-4a0d-9391-9ec4df0242ee\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Adj Close</th>\n","      <th>Volume</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1/27/2014</td>\n","      <td>11717867188</td>\n","      <td>11856540039</td>\n","      <td>11648531250</td>\n","      <td>11717867188</td>\n","      <td>11717867188</td>\n","      <td>608510</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2/6/2014</td>\n","      <td>11648531250</td>\n","      <td>11717867188</td>\n","      <td>11509858398</td>\n","      <td>11648531250</td>\n","      <td>11648531250</td>\n","      <td>1140509</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2/7/2014</td>\n","      <td>11579194336</td>\n","      <td>11717867188</td>\n","      <td>11509858398</td>\n","      <td>11579194336</td>\n","      <td>11579194336</td>\n","      <td>826750</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2/10/2014</td>\n","      <td>11509858398</td>\n","      <td>11648531250</td>\n","      <td>11440521484</td>\n","      <td>11509858398</td>\n","      <td>11509858398</td>\n","      <td>1639712</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2/11/2014</td>\n","      <td>11579194336</td>\n","      <td>11717867188</td>\n","      <td>11440521484</td>\n","      <td>11509858398</td>\n","      <td>11509858398</td>\n","      <td>2082063</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2460</th>\n","      <td>12/8/2023</td>\n","      <td>27000000000</td>\n","      <td>27100000000</td>\n","      <td>26700000000</td>\n","      <td>26900000000</td>\n","      <td>26900000000</td>\n","      <td>4518900</td>\n","    </tr>\n","    <tr>\n","      <th>2461</th>\n","      <td>12/11/2023</td>\n","      <td>26950000000</td>\n","      <td>27050000000</td>\n","      <td>26700000000</td>\n","      <td>26850000000</td>\n","      <td>26850000000</td>\n","      <td>2323100</td>\n","    </tr>\n","    <tr>\n","      <th>2462</th>\n","      <td>12/12/2023</td>\n","      <td>26900000000</td>\n","      <td>27000000000</td>\n","      <td>26700000000</td>\n","      <td>27000000000</td>\n","      <td>27000000000</td>\n","      <td>3346200</td>\n","    </tr>\n","    <tr>\n","      <th>2463</th>\n","      <td>12/13/2023</td>\n","      <td>27150000000</td>\n","      <td>27350000000</td>\n","      <td>26700000000</td>\n","      <td>26750000000</td>\n","      <td>26750000000</td>\n","      <td>3749800</td>\n","    </tr>\n","    <tr>\n","      <th>2464</th>\n","      <td>12/14/2023</td>\n","      <td>26950000000</td>\n","      <td>26950000000</td>\n","      <td>26450000000</td>\n","      <td>26750000000</td>\n","      <td>26750000000</td>\n","      <td>3873600</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2465 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-417e5419-721b-4a0d-9391-9ec4df0242ee')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-417e5419-721b-4a0d-9391-9ec4df0242ee button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-417e5419-721b-4a0d-9391-9ec4df0242ee');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c852f60a-3d28-4913-a16e-8c4a3836ea41\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c852f60a-3d28-4913-a16e-8c4a3836ea41')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c852f60a-3d28-4913-a16e-8c4a3836ea41 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_7ac749df-b3f5-4559-8252-1b7cb992e3d2\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_7ac749df-b3f5-4559-8252-1b7cb992e3d2 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["# 2. Đọc file dữ liệu và chia train test  theo tỉ lệ 9 1\n","df = pd.read_csv(company_csv)\n","df = df[['Close']]\n","df = df.dropna() # Drop missing values\n","df = df.reset_index(drop=True) # Reset the index\n","\n","# Split the data into training, testing.\n","train_size = int(0.9* len(df))\n","test_size = len(df)-train_size\n","\n","train_data = df[:train_size]\n","test_data = df[train_size:train_size+test_size]\n","val_data = df[train_size+test_size:]\n","x_train = np.array(train_data.index).reshape(-1, 1)\n","y_train = np.array(train_data['Close'])\n","exog_train = np.arange(len(train_data))"],"metadata":{"id":"ge5vc8Ao6Tlu","executionInfo":{"status":"ok","timestamp":1703959700825,"user_tz":-420,"elapsed":356,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["model_autoARIMA = auto_arima(y_train,start_p=0, start_q=0,\n","                           max_p=5, max_q=5, m=12,\n","                           start_P=0, seasonal=False,\n","                           d=0, D=0, trace=True,\n","                           error_action='ignore',\n","                           suppress_warnings=True,\n","                           stepwise=True,\n","                      exogenous= data[['High','Open','Low']][:len(y_train)])\n","\n","model_autoARIMA.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":819},"id":"vdh0pS-16aza","executionInfo":{"status":"ok","timestamp":1703959769488,"user_tz":-420,"elapsed":32237,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}},"outputId":"53c61137-0430-40c6-b345-8ec7b7c169d6"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/pmdarima/arima/_validation.py:62: UserWarning: m (12) set for non-seasonal fit. Setting to 0\n","  warnings.warn(\"m (%i) set for non-seasonal fit. Setting to 0\" % m)\n"]},{"output_type":"stream","name":"stdout","text":["Performing stepwise search to minimize aic\n"," ARIMA(0,0,0)(0,0,0)[0]             : AIC=111126.182, Time=0.13 sec\n"," ARIMA(1,0,0)(0,0,0)[0]             : AIC=inf, Time=0.44 sec\n"," ARIMA(0,0,1)(0,0,0)[0]             : AIC=109492.098, Time=0.30 sec\n"," ARIMA(1,0,1)(0,0,0)[0]             : AIC=94486.641, Time=0.94 sec\n"," ARIMA(2,0,1)(0,0,0)[0]             : AIC=94482.678, Time=1.07 sec\n"," ARIMA(2,0,0)(0,0,0)[0]             : AIC=inf, Time=0.79 sec\n"," ARIMA(3,0,1)(0,0,0)[0]             : AIC=94484.339, Time=2.80 sec\n"," ARIMA(2,0,2)(0,0,0)[0]             : AIC=94484.333, Time=3.58 sec\n"," ARIMA(1,0,2)(0,0,0)[0]             : AIC=94488.463, Time=3.63 sec\n"," ARIMA(3,0,0)(0,0,0)[0]             : AIC=inf, Time=3.53 sec\n"," ARIMA(3,0,2)(0,0,0)[0]             : AIC=inf, Time=11.19 sec\n"," ARIMA(2,0,1)(0,0,0)[0] intercept   : AIC=94486.020, Time=3.37 sec\n","\n","Best model:  ARIMA(2,0,1)(0,0,0)[0]          \n","Total fit time: 31.823 seconds\n"]},{"output_type":"execute_result","data":{"text/plain":["<class 'statsmodels.iolib.summary.Summary'>\n","\"\"\"\n","                               SARIMAX Results                                \n","==============================================================================\n","Dep. Variable:                      y   No. Observations:                 2218\n","Model:               SARIMAX(2, 0, 1)   Log Likelihood              -47237.339\n","Date:                Sat, 30 Dec 2023   AIC                          94482.678\n","Time:                        18:09:28   BIC                          94505.495\n","Sample:                             0   HQIC                         94491.012\n","                               - 2218                                         \n","Covariance Type:                  opg                                         \n","==============================================================================\n","                 coef    std err          z      P>|z|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","ar.L1          0.0499      0.029      1.695      0.090      -0.008       0.108\n","ar.L2          0.9496      0.029     32.190      0.000       0.892       1.007\n","ma.L1          0.9305      0.034     27.324      0.000       0.864       0.997\n","sigma2      1.846e+17        nan        nan        nan         nan         nan\n","===================================================================================\n","Ljung-Box (L1) (Q):                   0.30   Jarque-Bera (JB):              1980.91\n","Prob(Q):                              0.59   Prob(JB):                         0.00\n","Heteroskedasticity (H):               8.27   Skew:                            -0.25\n","Prob(H) (two-sided):                  0.00   Kurtosis:                         7.60\n","===================================================================================\n","\n","Warnings:\n","[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n","[2] Covariance matrix is singular or near-singular, with condition number 9.65e+54. Standard errors may be unstable.\n","\"\"\""],"text/html":["<table class=\"simpletable\">\n","<caption>SARIMAX Results</caption>\n","<tr>\n","  <th>Dep. Variable:</th>           <td>y</td>        <th>  No. Observations:  </th>    <td>2218</td>   \n","</tr>\n","<tr>\n","  <th>Model:</th>           <td>SARIMAX(2, 0, 1)</td> <th>  Log Likelihood     </th> <td>-47237.339</td>\n","</tr>\n","<tr>\n","  <th>Date:</th>            <td>Sat, 30 Dec 2023</td> <th>  AIC                </th>  <td>94482.678</td>\n","</tr>\n","<tr>\n","  <th>Time:</th>                <td>18:09:28</td>     <th>  BIC                </th>  <td>94505.495</td>\n","</tr>\n","<tr>\n","  <th>Sample:</th>                  <td>0</td>        <th>  HQIC               </th>  <td>94491.012</td>\n","</tr>\n","<tr>\n","  <th></th>                      <td> - 2218</td>     <th>                     </th>      <td> </td>    \n","</tr>\n","<tr>\n","  <th>Covariance Type:</th>        <td>opg</td>       <th>                     </th>      <td> </td>    \n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","     <td></td>       <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n","</tr>\n","<tr>\n","  <th>ar.L1</th>  <td>    0.0499</td> <td>    0.029</td> <td>    1.695</td> <td> 0.090</td> <td>   -0.008</td> <td>    0.108</td>\n","</tr>\n","<tr>\n","  <th>ar.L2</th>  <td>    0.9496</td> <td>    0.029</td> <td>   32.190</td> <td> 0.000</td> <td>    0.892</td> <td>    1.007</td>\n","</tr>\n","<tr>\n","  <th>ma.L1</th>  <td>    0.9305</td> <td>    0.034</td> <td>   27.324</td> <td> 0.000</td> <td>    0.864</td> <td>    0.997</td>\n","</tr>\n","<tr>\n","  <th>sigma2</th> <td> 1.846e+17</td> <td>      nan</td> <td>      nan</td> <td>   nan</td> <td>      nan</td> <td>      nan</td>\n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","  <th>Ljung-Box (L1) (Q):</th>     <td>0.30</td> <th>  Jarque-Bera (JB):  </th> <td>1980.91</td>\n","</tr>\n","<tr>\n","  <th>Prob(Q):</th>                <td>0.59</td> <th>  Prob(JB):          </th>  <td>0.00</td>  \n","</tr>\n","<tr>\n","  <th>Heteroskedasticity (H):</th> <td>8.27</td> <th>  Skew:              </th>  <td>-0.25</td> \n","</tr>\n","<tr>\n","  <th>Prob(H) (two-sided):</th>    <td>0.00</td> <th>  Kurtosis:          </th>  <td>7.60</td>  \n","</tr>\n","</table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step).<br/>[2] Covariance matrix is singular or near-singular, with condition number 9.65e+54. Standard errors may be unstable."],"text/latex":"\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}          &        y         & \\textbf{  No. Observations:  } &    2218     \\\\\n\\textbf{Model:}                  & SARIMAX(2, 0, 1) & \\textbf{  Log Likelihood     } & -47237.339  \\\\\n\\textbf{Date:}                   & Sat, 30 Dec 2023 & \\textbf{  AIC                } & 94482.678   \\\\\n\\textbf{Time:}                   &     18:09:28     & \\textbf{  BIC                } & 94505.495   \\\\\n\\textbf{Sample:}                 &        0         & \\textbf{  HQIC               } & 94491.012   \\\\\n\\textbf{}                        &      - 2218      & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}        &       opg        & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                & \\textbf{coef} & \\textbf{std err} & \\textbf{z} & \\textbf{P$> |$z$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{ar.L1}  &       0.0499  &        0.029     &     1.695  &         0.090        &       -0.008    &        0.108     \\\\\n\\textbf{ar.L2}  &       0.9496  &        0.029     &    32.190  &         0.000        &        0.892    &        1.007     \\\\\n\\textbf{ma.L1}  &       0.9305  &        0.034     &    27.324  &         0.000        &        0.864    &        0.997     \\\\\n\\textbf{sigma2} &    1.846e+17  &          nan     &       nan  &           nan        &          nan    &          nan     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Ljung-Box (L1) (Q):}     & 0.30 & \\textbf{  Jarque-Bera (JB):  } & 1980.91  \\\\\n\\textbf{Prob(Q):}                & 0.59 & \\textbf{  Prob(JB):          } &   0.00   \\\\\n\\textbf{Heteroskedasticity (H):} & 8.27 & \\textbf{  Skew:              } &  -0.25   \\\\\n\\textbf{Prob(H) (two-sided):}    & 0.00 & \\textbf{  Kurtosis:          } &   7.60   \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{SARIMAX Results}\n\\end{center}\n\nWarnings: \\newline\n [1] Covariance matrix calculated using the outer product of gradients (complex-step). \\newline\n [2] Covariance matrix is singular or near-singular, with condition number 9.65e+54. Standard errors may be unstable."},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["model = ARIMA(y_train, order=(2,0,1),exog=data[['High','Open','Low']][:len(y_train)]).fit()\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":661},"id":"-W7nlhSF6l1K","executionInfo":{"status":"ok","timestamp":1703959781004,"user_tz":-420,"elapsed":11532,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}},"outputId":"4099cc5b-079e-4cef-b279-760281e453cf"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"execute_result","data":{"text/plain":["<class 'statsmodels.iolib.summary.Summary'>\n","\"\"\"\n","                               SARIMAX Results                                \n","==============================================================================\n","Dep. Variable:                      y   No. Observations:                 2218\n","Model:                 ARIMA(2, 0, 1)   Log Likelihood              -45240.235\n","Date:                Sat, 30 Dec 2023   AIC                          90496.469\n","Time:                        18:09:40   BIC                          90542.104\n","Sample:                             0   HQIC                         90513.138\n","                               - 2218                                         \n","Covariance Type:                  opg                                         \n","==============================================================================\n","                 coef    std err          z      P>|z|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","const       1.335e+07   2.96e-09    4.5e+15      0.000    1.33e+07    1.33e+07\n","High           0.8659      0.009     93.772      0.000       0.848       0.884\n","Open          -0.6637      0.010    -66.577      0.000      -0.683      -0.644\n","Low            0.7943      0.008    100.522      0.000       0.779       0.810\n","ar.L1         -0.0559      0.800     -0.070      0.944      -1.623       1.512\n","ar.L2          0.0243      0.092      0.266      0.790      -0.155       0.204\n","ma.L1         -0.0553      0.800     -0.069      0.945      -1.624       1.513\n","sigma2      3.045e+16   2.75e-16   1.11e+32      0.000    3.05e+16    3.05e+16\n","===================================================================================\n","Ljung-Box (L1) (Q):                   0.00   Jarque-Bera (JB):              2797.28\n","Prob(Q):                              0.97   Prob(JB):                         0.00\n","Heteroskedasticity (H):               6.36   Skew:                             0.44\n","Prob(H) (two-sided):                  0.00   Kurtosis:                         8.43\n","===================================================================================\n","\n","Warnings:\n","[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n","[2] Covariance matrix is singular or near-singular, with condition number 5.16e+46. Standard errors may be unstable.\n","\"\"\""],"text/html":["<table class=\"simpletable\">\n","<caption>SARIMAX Results</caption>\n","<tr>\n","  <th>Dep. Variable:</th>           <td>y</td>        <th>  No. Observations:  </th>    <td>2218</td>   \n","</tr>\n","<tr>\n","  <th>Model:</th>            <td>ARIMA(2, 0, 1)</td>  <th>  Log Likelihood     </th> <td>-45240.235</td>\n","</tr>\n","<tr>\n","  <th>Date:</th>            <td>Sat, 30 Dec 2023</td> <th>  AIC                </th>  <td>90496.469</td>\n","</tr>\n","<tr>\n","  <th>Time:</th>                <td>18:09:40</td>     <th>  BIC                </th>  <td>90542.104</td>\n","</tr>\n","<tr>\n","  <th>Sample:</th>                  <td>0</td>        <th>  HQIC               </th>  <td>90513.138</td>\n","</tr>\n","<tr>\n","  <th></th>                      <td> - 2218</td>     <th>                     </th>      <td> </td>    \n","</tr>\n","<tr>\n","  <th>Covariance Type:</th>        <td>opg</td>       <th>                     </th>      <td> </td>    \n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","     <td></td>       <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n","</tr>\n","<tr>\n","  <th>const</th>  <td> 1.335e+07</td> <td> 2.96e-09</td> <td>  4.5e+15</td> <td> 0.000</td> <td> 1.33e+07</td> <td> 1.33e+07</td>\n","</tr>\n","<tr>\n","  <th>High</th>   <td>    0.8659</td> <td>    0.009</td> <td>   93.772</td> <td> 0.000</td> <td>    0.848</td> <td>    0.884</td>\n","</tr>\n","<tr>\n","  <th>Open</th>   <td>   -0.6637</td> <td>    0.010</td> <td>  -66.577</td> <td> 0.000</td> <td>   -0.683</td> <td>   -0.644</td>\n","</tr>\n","<tr>\n","  <th>Low</th>    <td>    0.7943</td> <td>    0.008</td> <td>  100.522</td> <td> 0.000</td> <td>    0.779</td> <td>    0.810</td>\n","</tr>\n","<tr>\n","  <th>ar.L1</th>  <td>   -0.0559</td> <td>    0.800</td> <td>   -0.070</td> <td> 0.944</td> <td>   -1.623</td> <td>    1.512</td>\n","</tr>\n","<tr>\n","  <th>ar.L2</th>  <td>    0.0243</td> <td>    0.092</td> <td>    0.266</td> <td> 0.790</td> <td>   -0.155</td> <td>    0.204</td>\n","</tr>\n","<tr>\n","  <th>ma.L1</th>  <td>   -0.0553</td> <td>    0.800</td> <td>   -0.069</td> <td> 0.945</td> <td>   -1.624</td> <td>    1.513</td>\n","</tr>\n","<tr>\n","  <th>sigma2</th> <td> 3.045e+16</td> <td> 2.75e-16</td> <td> 1.11e+32</td> <td> 0.000</td> <td> 3.05e+16</td> <td> 3.05e+16</td>\n","</tr>\n","</table>\n","<table class=\"simpletable\">\n","<tr>\n","  <th>Ljung-Box (L1) (Q):</th>     <td>0.00</td> <th>  Jarque-Bera (JB):  </th> <td>2797.28</td>\n","</tr>\n","<tr>\n","  <th>Prob(Q):</th>                <td>0.97</td> <th>  Prob(JB):          </th>  <td>0.00</td>  \n","</tr>\n","<tr>\n","  <th>Heteroskedasticity (H):</th> <td>6.36</td> <th>  Skew:              </th>  <td>0.44</td>  \n","</tr>\n","<tr>\n","  <th>Prob(H) (two-sided):</th>    <td>0.00</td> <th>  Kurtosis:          </th>  <td>8.43</td>  \n","</tr>\n","</table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step).<br/>[2] Covariance matrix is singular or near-singular, with condition number 5.16e+46. Standard errors may be unstable."],"text/latex":"\\begin{center}\n\\begin{tabular}{lclc}\n\\toprule\n\\textbf{Dep. Variable:}          &        y         & \\textbf{  No. Observations:  } &    2218     \\\\\n\\textbf{Model:}                  &  ARIMA(2, 0, 1)  & \\textbf{  Log Likelihood     } & -45240.235  \\\\\n\\textbf{Date:}                   & Sat, 30 Dec 2023 & \\textbf{  AIC                } & 90496.469   \\\\\n\\textbf{Time:}                   &     18:09:40     & \\textbf{  BIC                } & 90542.104   \\\\\n\\textbf{Sample:}                 &        0         & \\textbf{  HQIC               } & 90513.138   \\\\\n\\textbf{}                        &      - 2218      & \\textbf{                     } &             \\\\\n\\textbf{Covariance Type:}        &       opg        & \\textbf{                     } &             \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lcccccc}\n                & \\textbf{coef} & \\textbf{std err} & \\textbf{z} & \\textbf{P$> |$z$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n\\midrule\n\\textbf{const}  &    1.335e+07  &     2.96e-09     &   4.5e+15  &         0.000        &     1.33e+07    &     1.33e+07     \\\\\n\\textbf{High}   &       0.8659  &        0.009     &    93.772  &         0.000        &        0.848    &        0.884     \\\\\n\\textbf{Open}   &      -0.6637  &        0.010     &   -66.577  &         0.000        &       -0.683    &       -0.644     \\\\\n\\textbf{Low}    &       0.7943  &        0.008     &   100.522  &         0.000        &        0.779    &        0.810     \\\\\n\\textbf{ar.L1}  &      -0.0559  &        0.800     &    -0.070  &         0.944        &       -1.623    &        1.512     \\\\\n\\textbf{ar.L2}  &       0.0243  &        0.092     &     0.266  &         0.790        &       -0.155    &        0.204     \\\\\n\\textbf{ma.L1}  &      -0.0553  &        0.800     &    -0.069  &         0.945        &       -1.624    &        1.513     \\\\\n\\textbf{sigma2} &    3.045e+16  &     2.75e-16     &  1.11e+32  &         0.000        &     3.05e+16    &     3.05e+16     \\\\\n\\bottomrule\n\\end{tabular}\n\\begin{tabular}{lclc}\n\\textbf{Ljung-Box (L1) (Q):}     & 0.00 & \\textbf{  Jarque-Bera (JB):  } & 2797.28  \\\\\n\\textbf{Prob(Q):}                & 0.97 & \\textbf{  Prob(JB):          } &   0.00   \\\\\n\\textbf{Heteroskedasticity (H):} & 6.36 & \\textbf{  Skew:              } &   0.44   \\\\\n\\textbf{Prob(H) (two-sided):}    & 0.00 & \\textbf{  Kurtosis:          } &   8.43   \\\\\n\\bottomrule\n\\end{tabular}\n%\\caption{SARIMAX Results}\n\\end{center}\n\nWarnings: \\newline\n [1] Covariance matrix calculated using the outer product of gradients (complex-step). \\newline\n [2] Covariance matrix is singular or near-singular, with condition number 5.16e+46. Standard errors may be unstable."},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["x_test = np.array(test_data.index).reshape(-1, 1)\n","y_test = np.array(test_data['Close'])\n","y_pred = model.predict(start=int(x_test[0]), end=int(len(x_test)+x_test[0]-1),exog=data[['High','Open','Low']][int(x_test[0]):int(len(x_test)+x_test[0])])\n","from sklearn.metrics import mean_absolute_percentage_error,mean_absolute_error\n","from sklearn.metrics import mean_squared_log_error, mean_absolute_error, mean_absolute_percentage_error\n","# 7. Đánh giá độ chính xác test bằng RMSE, MAE , MAPE\n","# RMSE\n","test_rmse = np.sqrt(np.mean((y_pred - y_test)**2))\n","print('Testing RMSE:', test_rmse)\n","# MAPE\n","test_mape = mean_absolute_percentage_error(y_test,y_pred)\n","print('Testing MAPE:', test_mape)\n","# Calculate MSLE\n","test_msle = mean_squared_log_error(y_test, y_pred)\n","print('Testing MSLE:', test_msle)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dJFtlAjj6qyc","executionInfo":{"status":"ok","timestamp":1703959781005,"user_tz":-420,"elapsed":31,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}},"outputId":"8a37a114-17aa-4875-9ccb-2127f0f5829f"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Testing RMSE: 241345377.65257108\n","Testing MAPE: 0.006640835431544237\n","Testing MSLE: 8.37133199997261e-05\n"]}]},{"cell_type":"code","source":["last_index =  df.index[-1]\n","last_data = pd.RangeIndex(start=last_index, stop=last_index+30, step=1)\n","\n","x_next_30_days = np.array(range(last_index+1, last_index+31)).reshape(-1, 1)\n","# Assuming 'data' is your training data, replace it with your actual training data\n","exog_data = data[['High', 'Open', 'Low']][last_index - 523:last_index]\n","\n","y_next_30_days = model.predict(start=int(x_next_30_days[0]), end=int(len(x_next_30_days) + x_next_30_days[0] - 1),\n","                               exog=data[['High','Open','Low']][last_index-277:last_index])\n","\n","print('Predicted closing prices for the next 30 days:')\n","print(y_next_30_days)\n","\n","\n","plt.plot(train_data.index, train_data['Close'])\n","plt.plot(test_data.index, test_data['Close'])\n","plt.plot(test_data.index, y_pred)\n","plt.plot(last_data,y_next_30_days)\n","plt.legend(['Train', 'Test', 'Predict_test','Next30Day'])\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"BXDfAJFa6tlf","executionInfo":{"status":"ok","timestamp":1703959802738,"user_tz":-420,"elapsed":2317,"user":{"displayName":"Dilys Thompson","userId":"10004039643777426411"}},"outputId":"0337f8a8-3ad2-4744-df0e-942151f00b1c"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Predicted closing prices for the next 30 days:\n","2465    2.532268e+10\n","2466    2.509308e+10\n","2467    2.556529e+10\n","2468    2.550005e+10\n","2469    2.577191e+10\n","2470    2.638915e+10\n","2471    2.599963e+10\n","2472    2.626387e+10\n","2473    2.664770e+10\n","2474    2.724207e+10\n","2475    2.695653e+10\n","2476    2.648816e+10\n","2477    2.640717e+10\n","2478    2.631182e+10\n","2479    2.636793e+10\n","2480    2.615156e+10\n","2481    2.600660e+10\n","2482    2.606239e+10\n","2483    2.582136e+10\n","2484    2.626387e+10\n","2485    2.644692e+10\n","2486    2.601175e+10\n","2487    2.634021e+10\n","2488    2.652581e+10\n","2489    2.659218e+10\n","2490    2.681231e+10\n","2491    2.676553e+10\n","2492    2.675542e+10\n","2493    2.674531e+10\n","2494    2.688244e+10\n","Name: predicted_mean, dtype: float64\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}